"""Initial Tables

Revision ID: 4cd452166063
Revises: 
Create Date: 2023-01-28 18:13:32.577423

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from app.utils.sqlalchemy.custom_types import TSVector

# revision identifiers, used by Alembic.
revision = '4cd452166063'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_category_id'), 'category', ['id'], unique=False)
    op.create_index(op.f('ix_category_name'), 'category', ['name'], unique=True)
    op.create_table('customer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('mobile', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_customer_email'), 'customer', ['email'], unique=True)
    op.create_index(op.f('ix_customer_first_name'), 'customer', ['first_name'], unique=False)
    op.create_index(op.f('ix_customer_id'), 'customer', ['id'], unique=False)
    op.create_index(op.f('ix_customer_last_name'), 'customer', ['last_name'], unique=False)
    op.create_index(op.f('ix_customer_mobile'), 'customer', ['mobile'], unique=False)
    op.create_table('food',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('tsv', TSVector(), sa.Computed("to_tsvector('english',  name || ' ' ||  description)", persisted=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_food_tsv', 'food', ['tsv'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_food_id'), 'food', ['id'], unique=False)
    op.create_index(op.f('ix_food_name'), 'food', ['name'], unique=False)
    op.create_table('layout',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('items', sa.JSON(), nullable=True),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_layout_id'), 'layout', ['id'], unique=False)
    op.create_index(op.f('ix_layout_name'), 'layout', ['name'], unique=True)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('mobile', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role', postgresql.ENUM('admin', 'hostess', 'waiter', 'cook', 'employee', name='roluser'), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_first_name'), 'user', ['first_name'], unique=False)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_last_name'), 'user', ['last_name'], unique=False)
    op.create_table('board',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('layout_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('can_smoke', sa.Boolean(), nullable=True),
    sa.Column('position', sa.JSON(), nullable=True),
    sa.Column('qr', sa.String(), nullable=True),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['layout_id'], ['layout.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_board_id'), 'board', ['id'], unique=False)
    op.create_index(op.f('ix_board_name'), 'board', ['name'], unique=True)
    op.create_table('category_food',
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('food_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.ForeignKeyConstraint(['food_id'], ['food.id'], ),
    sa.PrimaryKeyConstraint('category_id', 'food_id')
    )
    op.create_table('customer_address',
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('street', sa.String(), nullable=False),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('postal_code', sa.Integer(), nullable=True),
    sa.Column('location', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.PrimaryKeyConstraint('customer_id', 'street')
    )
    op.create_index(op.f('ix_customer_address_customer_id'), 'customer_address', ['customer_id'], unique=False)
    op.create_index(op.f('ix_customer_address_street'), 'customer_address', ['street'], unique=False)
    op.create_table('food_unit',
    sa.Column('food_id', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['food.id'], ),
    sa.PrimaryKeyConstraint('food_id', 'unit')
    )
    op.create_index(op.f('ix_food_unit_food_id'), 'food_unit', ['food_id'], unique=False)
    op.create_index(op.f('ix_food_unit_unit'), 'food_unit', ['unit'], unique=False)
    op.create_table('food_variant',
    sa.Column('food_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['food.id'], ),
    sa.PrimaryKeyConstraint('food_id', 'name')
    )
    op.create_index(op.f('ix_food_variant_food_id'), 'food_variant', ['food_id'], unique=False)
    op.create_index(op.f('ix_food_variant_name'), 'food_variant', ['name'], unique=False)
    op.create_table('order',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('board_id', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('new', 'preparing', 'delivering', 'delivered', 'returned', 'paid', 'cancel', 'failed', name='statusorder'), nullable=True),
    sa.Column('order_type', postgresql.ENUM('restaurant', 'pick_up', 'shipment', name='typesorder'), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('subtotal', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('tax', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('grant_total', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['board_id'], ['board.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_board_id'), 'order', ['board_id'], unique=False)
    op.create_index(op.f('ix_order_customer_id'), 'order', ['customer_id'], unique=False)
    op.create_index(op.f('ix_order_id'), 'order', ['id'], unique=False)
    op.create_index(op.f('ix_order_user_id'), 'order', ['user_id'], unique=False)
    op.create_table('order_food',
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('food_id', sa.Integer(), nullable=False),
    sa.Column('variant', sa.String(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['food.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.PrimaryKeyConstraint('order_id', 'food_id', 'variant', 'unit')
    )
    op.create_index(op.f('ix_order_food_food_id'), 'order_food', ['food_id'], unique=False)
    op.create_index(op.f('ix_order_food_order_id'), 'order_food', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_food_unit'), 'order_food', ['unit'], unique=False)
    op.create_index(op.f('ix_order_food_variant'), 'order_food', ['variant'], unique=False)
    op.create_table('payment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.String(), nullable=True),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('type_cart', postgresql.ENUM('credit_cart', 'debit_cart', 'cash', name='typepayment'), nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'failed', 'declined', 'success', 'cancel', name='statuspayment'), nullable=True),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('created_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_date', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_customer_id'), 'payment', ['customer_id'], unique=False)
    op.create_index(op.f('ix_payment_id'), 'payment', ['id'], unique=False)
    op.create_index(op.f('ix_payment_order_id'), 'payment', ['order_id'], unique=False)
    op.create_index(op.f('ix_payment_payment_id'), 'payment', ['payment_id'], unique=True)
    op.create_index(op.f('ix_payment_user_id'), 'payment', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_payment_user_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_payment_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_order_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_customer_id'), table_name='payment')
    op.drop_table('payment')
    op.drop_index(op.f('ix_order_food_variant'), table_name='order_food')
    op.drop_index(op.f('ix_order_food_unit'), table_name='order_food')
    op.drop_index(op.f('ix_order_food_order_id'), table_name='order_food')
    op.drop_index(op.f('ix_order_food_food_id'), table_name='order_food')
    op.drop_table('order_food')
    op.drop_index(op.f('ix_order_user_id'), table_name='order')
    op.drop_index(op.f('ix_order_id'), table_name='order')
    op.drop_index(op.f('ix_order_customer_id'), table_name='order')
    op.drop_index(op.f('ix_order_board_id'), table_name='order')
    op.drop_table('order')
    op.drop_index(op.f('ix_food_variant_name'), table_name='food_variant')
    op.drop_index(op.f('ix_food_variant_food_id'), table_name='food_variant')
    op.drop_table('food_variant')
    op.drop_index(op.f('ix_food_unit_unit'), table_name='food_unit')
    op.drop_index(op.f('ix_food_unit_food_id'), table_name='food_unit')
    op.drop_table('food_unit')
    op.drop_index(op.f('ix_customer_address_street'), table_name='customer_address')
    op.drop_index(op.f('ix_customer_address_customer_id'), table_name='customer_address')
    op.drop_table('customer_address')
    op.drop_table('category_food')
    op.drop_index(op.f('ix_board_name'), table_name='board')
    op.drop_index(op.f('ix_board_id'), table_name='board')
    op.drop_table('board')
    op.drop_index(op.f('ix_user_last_name'), table_name='user')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_first_name'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_layout_name'), table_name='layout')
    op.drop_index(op.f('ix_layout_id'), table_name='layout')
    op.drop_table('layout')
    op.drop_index(op.f('ix_food_name'), table_name='food')
    op.drop_index(op.f('ix_food_id'), table_name='food')
    op.drop_index('idx_food_tsv', table_name='food', postgresql_using='gin')
    op.drop_table('food')
    op.drop_index(op.f('ix_customer_mobile'), table_name='customer')
    op.drop_index(op.f('ix_customer_last_name'), table_name='customer')
    op.drop_index(op.f('ix_customer_id'), table_name='customer')
    op.drop_index(op.f('ix_customer_first_name'), table_name='customer')
    op.drop_index(op.f('ix_customer_email'), table_name='customer')
    op.drop_table('customer')
    op.drop_index(op.f('ix_category_name'), table_name='category')
    op.drop_index(op.f('ix_category_id'), table_name='category')
    op.drop_table('category')
    # ### end Alembic commands ###
    sa.Enum(name='statusorder').drop(op.get_bind(), checkfirst=False)
    sa.Enum(name='roluser').drop(op.get_bind(), checkfirst=False)
    sa.Enum(name='typepayment').drop(op.get_bind(), checkfirst=False)
    sa.Enum(name='statuspayment').drop(op.get_bind(), checkfirst=False)
    sa.Enum(name='typesorder').drop(op.get_bind(), checkfirst=False)
